type: single # single|window, maybe add opt
key: kNN_GNN_models #added to the csv names
evaluation: evaluation #evaluation|evaluation_last|evaluation_multiple|evaluation_user_based|evaluation_user_based_multiple
data:
  name: retailrocket #added in the end of the csv names
  folder: data/retailrocket/prepare/
  prefix: retailrocket
  opts: {sessions_test: 100}
results:
  folder: results/
metrics:
- class: accuracy.MRR
  length: [3,5,10,15,20]
- class: accuracy.CatD
  length: [3,5,10,15,20]
- class: accuracy.HitRate
  length: [3,5,10,15,20]
- class: accuracy_multiple.NDCG
  length: [3,5,10,15,20]
- class: coverage.Coverage
  length: [20]
- class: popularity.Popularity
  length: [20]
- class: saver.Saver
  length: [50]
- class: time_memory_usage.Time_usage_training
- class: time_memory_usage.Time_usage_testing
algorithms:
- class: knn.vstan.VSKNN_STAN
  params: { k: 625 , sample_size: 891, lambda_spw: 0.94 , lambda_snh: 55, lambda_inh: 2.4 }
  key: vstan
- class: knn.stan.STAN
  params: { k: 630 , sample_size: 3000, lambda_spw: 0.16 , lambda_snh: 530, lambda_inh: 0.57 }
  key: stan  
- class: knn.vsknn_normal.VMContextKNN
  params: { k: 624, sample_size: 888, weighting: same , weighting_score: div, idf_weighting: 5}
  key: vsknn
# GNN models
- class: MGS.MGS.MGS
  params: {epoch: 12, lr: 0.0034, batch_size: 64, l2: 0.0001, dropout: 0.5} 
  key: MGS
- class: CM_HGCN.CM_HGCN.CM_HGCN
  params: {epoch: 15, lr: 0.0006, batch_size: 50, embedding: 100, l2: 0.00001}  
  key: CM_HGCN
- class: GNRRW.GNRRW.GNRRW
  params: {epoch: 10, lr: 0.0045, batch_size: 200, hidden_size: 16, l2: 0.00001}
  key: GNRRW
- class: TAGNN.TAGNN.TAGNN
  params: {epoch: 20, lr: 0.005, batch_size: 100, embedding_size: 100, l2: 0.00001}
  key: TAGNN